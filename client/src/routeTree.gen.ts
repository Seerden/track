/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as TodayRouteImport } from "./routes/today"
import { Route as RegisterRouteImport } from "./routes/register"
import { Route as LoginRouteImport } from "./routes/login"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as LogbooksIndexRouteImport } from "./routes/logbooks/index"
import { Route as ActivitiesIndexRouteImport } from "./routes/activities/index"
import { Route as NotesNewRouteImport } from "./routes/notes/new"
import { Route as LogbooksNewRouteImport } from "./routes/logbooks/new"
import { Route as HabitsNewRouteImport } from "./routes/habits/new"
import { Route as ActivitiesNewRouteImport } from "./routes/activities/new"
import { Route as LogbooksLogbookIdIndexRouteImport } from "./routes/logbooks/$logbookId/index"
import { Route as LogbooksLogbookIdLogIndexRouteImport } from "./routes/logbooks/$logbookId/log/index"
import { Route as LogbooksLogbookIdLogLogIdRouteImport } from "./routes/logbooks/$logbookId/log/$logId"

const TodayRoute = TodayRouteImport.update({
  id: "/today",
  path: "/today",
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: "/register",
  path: "/register",
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const LogbooksIndexRoute = LogbooksIndexRouteImport.update({
  id: "/logbooks/",
  path: "/logbooks/",
  getParentRoute: () => rootRouteImport,
} as any)
const ActivitiesIndexRoute = ActivitiesIndexRouteImport.update({
  id: "/activities/",
  path: "/activities/",
  getParentRoute: () => rootRouteImport,
} as any)
const NotesNewRoute = NotesNewRouteImport.update({
  id: "/notes/new",
  path: "/notes/new",
  getParentRoute: () => rootRouteImport,
} as any)
const LogbooksNewRoute = LogbooksNewRouteImport.update({
  id: "/logbooks/new",
  path: "/logbooks/new",
  getParentRoute: () => rootRouteImport,
} as any)
const HabitsNewRoute = HabitsNewRouteImport.update({
  id: "/habits/new",
  path: "/habits/new",
  getParentRoute: () => rootRouteImport,
} as any)
const ActivitiesNewRoute = ActivitiesNewRouteImport.update({
  id: "/activities/new",
  path: "/activities/new",
  getParentRoute: () => rootRouteImport,
} as any)
const LogbooksLogbookIdIndexRoute = LogbooksLogbookIdIndexRouteImport.update({
  id: "/logbooks/$logbookId/",
  path: "/logbooks/$logbookId/",
  getParentRoute: () => rootRouteImport,
} as any)
const LogbooksLogbookIdLogIndexRoute =
  LogbooksLogbookIdLogIndexRouteImport.update({
    id: "/logbooks/$logbookId/log/",
    path: "/logbooks/$logbookId/log/",
    getParentRoute: () => rootRouteImport,
  } as any)
const LogbooksLogbookIdLogLogIdRoute =
  LogbooksLogbookIdLogLogIdRouteImport.update({
    id: "/logbooks/$logbookId/log/$logId",
    path: "/logbooks/$logbookId/log/$logId",
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/login": typeof LoginRoute
  "/register": typeof RegisterRoute
  "/today": typeof TodayRoute
  "/activities/new": typeof ActivitiesNewRoute
  "/habits/new": typeof HabitsNewRoute
  "/logbooks/new": typeof LogbooksNewRoute
  "/notes/new": typeof NotesNewRoute
  "/activities": typeof ActivitiesIndexRoute
  "/logbooks": typeof LogbooksIndexRoute
  "/logbooks/$logbookId": typeof LogbooksLogbookIdIndexRoute
  "/logbooks/$logbookId/log/$logId": typeof LogbooksLogbookIdLogLogIdRoute
  "/logbooks/$logbookId/log": typeof LogbooksLogbookIdLogIndexRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/login": typeof LoginRoute
  "/register": typeof RegisterRoute
  "/today": typeof TodayRoute
  "/activities/new": typeof ActivitiesNewRoute
  "/habits/new": typeof HabitsNewRoute
  "/logbooks/new": typeof LogbooksNewRoute
  "/notes/new": typeof NotesNewRoute
  "/activities": typeof ActivitiesIndexRoute
  "/logbooks": typeof LogbooksIndexRoute
  "/logbooks/$logbookId": typeof LogbooksLogbookIdIndexRoute
  "/logbooks/$logbookId/log/$logId": typeof LogbooksLogbookIdLogLogIdRoute
  "/logbooks/$logbookId/log": typeof LogbooksLogbookIdLogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/login": typeof LoginRoute
  "/register": typeof RegisterRoute
  "/today": typeof TodayRoute
  "/activities/new": typeof ActivitiesNewRoute
  "/habits/new": typeof HabitsNewRoute
  "/logbooks/new": typeof LogbooksNewRoute
  "/notes/new": typeof NotesNewRoute
  "/activities/": typeof ActivitiesIndexRoute
  "/logbooks/": typeof LogbooksIndexRoute
  "/logbooks/$logbookId/": typeof LogbooksLogbookIdIndexRoute
  "/logbooks/$logbookId/log/$logId": typeof LogbooksLogbookIdLogLogIdRoute
  "/logbooks/$logbookId/log/": typeof LogbooksLogbookIdLogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/login"
    | "/register"
    | "/today"
    | "/activities/new"
    | "/habits/new"
    | "/logbooks/new"
    | "/notes/new"
    | "/activities"
    | "/logbooks"
    | "/logbooks/$logbookId"
    | "/logbooks/$logbookId/log/$logId"
    | "/logbooks/$logbookId/log"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/login"
    | "/register"
    | "/today"
    | "/activities/new"
    | "/habits/new"
    | "/logbooks/new"
    | "/notes/new"
    | "/activities"
    | "/logbooks"
    | "/logbooks/$logbookId"
    | "/logbooks/$logbookId/log/$logId"
    | "/logbooks/$logbookId/log"
  id:
    | "__root__"
    | "/"
    | "/login"
    | "/register"
    | "/today"
    | "/activities/new"
    | "/habits/new"
    | "/logbooks/new"
    | "/notes/new"
    | "/activities/"
    | "/logbooks/"
    | "/logbooks/$logbookId/"
    | "/logbooks/$logbookId/log/$logId"
    | "/logbooks/$logbookId/log/"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  TodayRoute: typeof TodayRoute
  ActivitiesNewRoute: typeof ActivitiesNewRoute
  HabitsNewRoute: typeof HabitsNewRoute
  LogbooksNewRoute: typeof LogbooksNewRoute
  NotesNewRoute: typeof NotesNewRoute
  ActivitiesIndexRoute: typeof ActivitiesIndexRoute
  LogbooksIndexRoute: typeof LogbooksIndexRoute
  LogbooksLogbookIdIndexRoute: typeof LogbooksLogbookIdIndexRoute
  LogbooksLogbookIdLogLogIdRoute: typeof LogbooksLogbookIdLogLogIdRoute
  LogbooksLogbookIdLogIndexRoute: typeof LogbooksLogbookIdLogIndexRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/today": {
      id: "/today"
      path: "/today"
      fullPath: "/today"
      preLoaderRoute: typeof TodayRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/register": {
      id: "/register"
      path: "/register"
      fullPath: "/register"
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/login": {
      id: "/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/logbooks/": {
      id: "/logbooks/"
      path: "/logbooks"
      fullPath: "/logbooks"
      preLoaderRoute: typeof LogbooksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/activities/": {
      id: "/activities/"
      path: "/activities"
      fullPath: "/activities"
      preLoaderRoute: typeof ActivitiesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/notes/new": {
      id: "/notes/new"
      path: "/notes/new"
      fullPath: "/notes/new"
      preLoaderRoute: typeof NotesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/logbooks/new": {
      id: "/logbooks/new"
      path: "/logbooks/new"
      fullPath: "/logbooks/new"
      preLoaderRoute: typeof LogbooksNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/habits/new": {
      id: "/habits/new"
      path: "/habits/new"
      fullPath: "/habits/new"
      preLoaderRoute: typeof HabitsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/activities/new": {
      id: "/activities/new"
      path: "/activities/new"
      fullPath: "/activities/new"
      preLoaderRoute: typeof ActivitiesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/logbooks/$logbookId/": {
      id: "/logbooks/$logbookId/"
      path: "/logbooks/$logbookId"
      fullPath: "/logbooks/$logbookId"
      preLoaderRoute: typeof LogbooksLogbookIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/logbooks/$logbookId/log/": {
      id: "/logbooks/$logbookId/log/"
      path: "/logbooks/$logbookId/log"
      fullPath: "/logbooks/$logbookId/log"
      preLoaderRoute: typeof LogbooksLogbookIdLogIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/logbooks/$logbookId/log/$logId": {
      id: "/logbooks/$logbookId/log/$logId"
      path: "/logbooks/$logbookId/log/$logId"
      fullPath: "/logbooks/$logbookId/log/$logId"
      preLoaderRoute: typeof LogbooksLogbookIdLogLogIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  TodayRoute: TodayRoute,
  ActivitiesNewRoute: ActivitiesNewRoute,
  HabitsNewRoute: HabitsNewRoute,
  LogbooksNewRoute: LogbooksNewRoute,
  NotesNewRoute: NotesNewRoute,
  ActivitiesIndexRoute: ActivitiesIndexRoute,
  LogbooksIndexRoute: LogbooksIndexRoute,
  LogbooksLogbookIdIndexRoute: LogbooksLogbookIdIndexRoute,
  LogbooksLogbookIdLogLogIdRoute: LogbooksLogbookIdLogLogIdRoute,
  LogbooksLogbookIdLogIndexRoute: LogbooksLogbookIdLogIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
